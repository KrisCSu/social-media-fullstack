package com.example.entity;

import javax.persistence.*;

/**
 * This is a class that models a Comment.
 */
@Entity
@Table(name = "comment")
public class Comment {

    /**
     * An id for this comment which will be automatically generated by the database.
     */
    @Column(name = "commentId")
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer commentId;

    /**
     * The id for the user who has posted this comment. We will assume that this is provided by the front-end of this
     * application.
     */
    @Column(name = "postedBy")
    private Integer postedBy;

    /**
     * The id of the message that this comment is associated with.
     */
    @Column(name = "messageId")
    private Integer messageId;

    /**
     * The text for this comment. Must be not blank and under 255 characters.
     */
    @Column(name = "commentText")
    private String commentText;

    /**
     * The epoch time when this comment was posted (number of seconds since Jan 1, 1970).
     * We will assume that this number is provided by the front-end of this application.
     */
    @Column(name = "timePostedEpoch")
    private Long timePostedEpoch;

    /**
     * A default, no-args constructor, as well as correctly formatted getters and setters, are needed for
     * Jackson Objectmapper to work.
     */
    public Comment() {
    }

    /**
     * When posting a new comment, the id can be generated by the database. In that case, a constructor without
     * commentId is needed.
     *
     * @param postedBy        the ID of the user posting the comment
     * @param messageId       the ID of the message being commented on
     * @param commentText     the text of the comment
     * @param timePostedEpoch the epoch time when the comment was posted
     */
    public Comment(Integer postedBy, Integer messageId, String commentText, Long timePostedEpoch) {
        this.postedBy = postedBy;
        this.messageId = messageId;
        this.commentText = commentText;
        this.timePostedEpoch = timePostedEpoch;
    }

    /**
     * When retrieving a comment from the database, all fields will be needed. In that case, a constructor with all
     * fields is needed.
     *
     * @param commentId       the ID of the comment
     * @param postedBy        the ID of the user posting the comment
     * @param messageId       the ID of the message being commented on
     * @param commentText     the text of the comment
     * @param timePostedEpoch the epoch time when the comment was posted
     */
    public Comment(Integer commentId, Integer postedBy, Integer messageId, String commentText, Long timePostedEpoch) {
        this.commentId = commentId;
        this.postedBy = postedBy;
        this.messageId = messageId;
        this.commentText = commentText;
        this.timePostedEpoch = timePostedEpoch;
    }

    // Getters and setters for all fields
    public Integer getCommentId() {
        return commentId;
    }

    public void setCommentId(Integer commentId) {
        this.commentId = commentId;
    }

    public Integer getPostedBy() {
        return postedBy;
    }

    public void setPostedBy(Integer postedBy) {
        this.postedBy = postedBy;
    }

    public Integer getMessageId() {
        return messageId;
    }

    public void setMessageId(Integer messageId) {
        this.messageId = messageId;
    }

    public String getCommentText() {
        return commentText;
    }

    public void setCommentText(String commentText) {
        this.commentText = commentText;
    }

    public Long getTimePostedEpoch() {
        return timePostedEpoch;
    }

    public void setTimePostedEpoch(Long timePostedEpoch) {
        this.timePostedEpoch = timePostedEpoch;
    }

    /**
     * Overriding the default equals() method adds functionality to tell when two objects are identical, allowing
     * Assert.assertEquals and List.contains to function.
     *
     * @param obj the other object.
     * @return true if obj is equal to this object.
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Comment other = (Comment) obj;
        if (commentId == null) {
            if (other.commentId != null)
                return false;
        } else if (!commentId.equals(other.commentId))
            return false;
        if (commentText == null) {
            if (other.commentText != null)
                return false;
        } else if (!commentText.equals(other.commentText))
            return false;
        if (postedBy == null) {
            if (other.postedBy != null)
                return false;
        } else if (!postedBy.equals(other.postedBy))
            return false;
        if (timePostedEpoch == null) {
            if (other.timePostedEpoch != null)
                return false;
        } else if (!timePostedEpoch.equals(other.timePostedEpoch))
            return false;
        if (messageId == null) {
            if (other.messageId != null)
                return false;
        } else if (!messageId.equals(other.messageId))
            return false;
        return true;
    }

    /**
     * Overriding the default toString() method allows for easy debugging.
     *
     * @return a String representation of this class.
     */
    @Override
    public String toString() {
        return "Comment{" +
                "commentId=" + commentId +
                ", postedBy=" + postedBy +
                ", messageId=" + messageId +
                ", commentText='" + commentText + '\'' +
                ", timePostedEpoch=" + timePostedEpoch +
                '}';
    }
}